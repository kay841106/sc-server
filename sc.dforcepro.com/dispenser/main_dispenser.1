package nopack

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"

	"sc.dforcepro.com/meter"

	"dforcepro.com/api"
	"gopkg.in/mgo.v2/bson"
)

type Dispenser bool

func (sca Dispenser) Enable() bool {
	return bool(sca)
}

func (sca Dispenser) GetAPIs() *[]*api.APIHandler {
	return &[]*api.APIHandler{
		&api.APIHandler{Path: "/dispenser/{start}/{end}", Next: sca.getRawData, Method: "GET", Auth: false},
	}
}

func xxxpipeBuildAllLatest() []bson.M {
	pipeline := []bson.M{}

	pipeline = append(pipeline, bson.M{
		"$project": bson.M{
			"_id": 0,

			"Building_Name": "$_id.Building_Name",
			"Gateway_ID":    "$_id.Gateway_ID",

			"lastReportTime": 1,
			"avg_Usage":      bson.M{"$divide": []interface{}{"$avg_Usage", 1000}},
			"avg_Demand":     bson.M{"$divide": []interface{}{"$avg_Demand", 1000}},
			"max_Demand":     bson.M{"$divide": []interface{}{"$max_Demand", 1000}},
			"min_Demand":     bson.M{"$divide": []interface{}{"$min_Demand", 1000}},
			"max_Usage":      bson.M{"$divide": []interface{}{"$max_Usage", 1000}},
			"min_Usage":      bson.M{"$divide": []interface{}{"$min_Usage", 1000}},

			"max_PF": 1,
			"min_PF": 1,
			"avg_PF": bson.M{"$abs": "$avg_PF"},
			"CC":     bson.M{"$multiply": []interface{}{"$CC", 1000}},
		},
	})

	return pipeline
}

func (sca Dispenser) getRawData(w http.ResponseWriter, req *http.Request) {
	vars := mux.Vars(req)
	tmpstart := vars["start"]
	tmpend := vars["end"]

	start, _ := strconv.ParseInt(tmpstart, 10, 64)
	end, _ := strconv.ParseInt(tmpend, 10, 64)
	dispenserDatastruct := []dispenserData{}
	selectData := bson.M{
		"address":        1,
		"status":         1,
		"temp":           1,
		"watts":          1,
		"current":        1,
		"devicenickname": 1,
		"lastupdated":    1,
		"_id":            0,
	}
	mongo := meter.GetMongo()
	mongo.DB(DispenserDB).C(dispenserRawdataCollection).Find(bson.M{"lastupdated": bson.M{"$gte": start, "$lte": end}}).Select(selectData).All(&dispenserDatastruct)
	json.NewEncoder(w).Encode(dispenserDatastruct)

}
