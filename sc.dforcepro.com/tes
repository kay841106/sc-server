package main

import (
	"fmt"

	"github.com/olivere/elastic"
)

type AutoGenerated struct {
	GatewayID       string  `json:"Gateway_ID"`
	LastReportTime  string  `json:"lastReportTime"`
	CC              float64 `json:"CC"`
	PwrUsage        float64 `json:"Pwr_Usage"`
	Floor           string  `json:"Floor"`
	BuildingName    string  `json:"Building_Name"`
	WeatherTemp     int     `json:"weather_Temp"`
	DeviceName      string  `json:"Device_Name"`
	PwrDemand       float64 `json:"Pwr_Demand"`
	QuarterPost     int     `json:"QuarterPost"`
	Facility        string  `json:"Facility"`
	DeviceDetails   string  `json:"Device_Details"`
	PF              float64 `json:"PF"`
	DeviceType      string  `json:"Device_Type"`
	BuildingDetails string  `json:"Building_Details"`
	DeviceID        string  `json:"Device_ID"`
}

type Item struct {
	Rows []AutoGenerated `json:"result,omitempty"`
}

func main() {

	client, err := elastic.NewClient(elastic.SetURL("http://127.0.0.1:9200"))
	if err != nil {
		panic(err)
	}
	fmt.Println(client)

	// session, err := mgo.Dial("140.118.70.136:27017")
	// if err != nil {
	// 	panic(err)
	// }
	// defer session.Close()

	// session.SetMode(mgo.Monotonic, true)

	// c := session.DB("Bimo_test").C("SC01_hourData_IB")
	// item := Item{}

	// find := c.Find(bson.M{"Device_ID": "33000509b4decb03"})

	// items := find.Iter()
	// for items.Next(&item) {
	// 	fmt.Println(item)
	// }


	m = mongodb({
		"uri": "mongodb://140.118.70.136:27017/test"
		// "timeout": "30s",
		// "tail": false,
		// "ssl": false,
		// "cacerts": ["/path/to/cert.pem"],
		// "wc": 1,
		// "fsync": false,
		// "bulk": false,
		// "collection_filters": "{\"foo\": {\"i\": {\"$gt\": 10}}}"
	  })
}
